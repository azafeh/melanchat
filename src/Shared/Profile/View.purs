module Shared.Profile.View where

import Prelude
import Shared.IM.Types
import Shared.Profile.Types
import Shared.Types

import Data.Array ((:))
import Data.Foldable as DF
import Data.Maybe (Maybe(..))
import Data.String.Common as DSC
import Data.Tuple (Tuple(..))
import Flame (Html)
import Flame.HTML.Attribute as HA
import Flame.HTML.Element as HE

--REFACTOR: get field names (like for display) from the record, not hardcoded strings
view :: ProfileModel -> Html ProfileMessage
view (ProfileModel {
        user: ProfileUser user,
        countries,
        isCountryVisible,
        isGenderVisible
}) =
        HE.div (HA.class' "profile-info-edition") [
                HE.div_ $ HE.img [HA.class' "avatar-profile", HA.src user.avatar, title "avatar", HA.onClick SelectAvatar],
                HE.input [HA.id "avatar-file-input", HA.type' "file", HA.class' "hidden", HA.accept ".png, .jpg, .jpeg, .tif, .tiff, .bmp"],
                HE.div_ [
                        HE.h1 [HA.id "profile-edition-name", HA.spellcheck false, titleWithGenerated "name", HA.contentEditable true, HA.onInput SetName, HA.onKeydown NameEnter ] user.name,
                        HE.h3 [HA.id "profile-edition-headline", HA.spellcheck false, HA.class' "headline", titleWithGenerated "headline", HA.contentEditable true, HA.onInput SetHeadline, HA.onKeydown HeadlineEnter] user.headline
                ],
                HE.div_ [
                        displayAge,
                        separator,
                        if isGenderVisible then displayGender else editGender,
                        separator,
                        if isCountryVisible then displayCountry else editCountry,
                        separator,
                        displayLanguages
                ],
                displayTags,
                HE.br,
                HE.span [HA.class' "profile-info-description", titleWithGenerated "description"] user.description,
                HE.br,
                HE.input [HA.type' "button", HA.onClick SaveProfile, HA.value "Save profile", HA.class' "action-button end"]
        ]

        where   title name = HA.title $ "Click to edit your " <> name
                titleWithGenerated name = HA.title $ "Click to edit your " <> name <> ". Leave blank for autogenerated."

                display itemName toggleMessage =
                        case _ of
                                Just s -> HE.span [title itemName, HA.onClick $ toggleMessage false] $ s <> " "
                                _ -> HE.span [HA.class' "profile-info-add", HA.onClick $ toggleMessage false] $ "Click here to add your " <> itemName <> " "

                toTagSpan tag = HE.span (HA.class' "tag") tag

                separator = HE.span (HA.class' "smaller") " â€¢ "

                displayAge = display "age" ToggleAge (map ((_ <> ",") <<< show) user.birthday)
                displayGender = display "gender" ToggleGender $ map show user.gender
                displayCountry = display "country" ToggleCountry do
                        country <- user.country
                        Tuple _ name <- DF.find (\(Tuple id _) -> id == country) countries
                        pure name
                displayLanguages =
                        display "languages" ToggleLanguages $ case DSC.joinWith ", " user.languages of
                                "" -> Nothing
                                l -> Just ("speaks " <> l)
                displayTags = HE.div_ $ (HE.text "TAGS" : map toTagSpan user.tags)

                displayOptions :: forall id. Show id => Eq id => Maybe id -> Array (Tuple id String) -> Array (Html ProfileMessage)
                displayOptions current = (HE.option [HA.value ""] "Don't show" : _) <<< map (\(Tuple id value) -> HE.option [HA.value $ show id, HA.selected $ Just id == current] value)

                editCountry = HE.select [HA.onInput SetCountry] $ displayOptions user.country countries
                editGender = HE.select [HA.onInput SetGender] $ displayOptions user.gender [Tuple Female $ show Female, Tuple Male $ show Male, Tuple NonBinary $ show NonBinary, Tuple Other $ show Other]
